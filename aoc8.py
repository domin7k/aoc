inputS = """.....................U.........w..................
l.................................................
...........o.a................U...w...............
............................................W.....
..........T....................s.............7....
.............................................W....
.........T..............4....n.d.H.........5......
......T.....oj...U.....n...w......H...........z...
.G..x..........................E.....V..H.........
.........a....................d....s.......7w.....
...j....r.............o.............V.......d...W.
.......r..J.Goa.U...............n................z
.........Jj.........M..........Pv.................
...J...........t..3..M..............sLV...........
...................t................n.............
....r...........X...........M........v............
...x....t......I......a.PM...............W........
...........1.Bj....I........vO.h.dL...............
.........6....Rr......B...X........h..5v.L..z.....
......1G...........x.....3B.......5...............
.................B....0..........4..E.............
.....................X.....5..h....P....f.....D...
.......1........J.....eK..........................
..................I....R....K...........k.........
......G..................O........................
...........H...9...............K8.P.4..k..E.......
............1....3.............8.F.............f..
.........................4........................
.l...........X............9.......................
....N.................R...t.e.....................
...g............3..R.........e....h.........f.....
...........................e......i...............
................2...I.7..9..O.....s.........k.....
....................6...9E.............F..O.......
........................KN........................
.......g......................Z.........F..f...Y..
...........................A....i.................
...........6g...b........8.......y.....S..........
..l.....6.....m...............8...................
....u..m...b...............p...A..................
..............b.p........................k........
....m......2...........Z..y....i..................
........g2.....b.........i....D..ZF...............
......2.0...........p............N..........A.....
...m.............S...y........A...Z...N...........
..S..l..........................................Y.
........S....0u.................y......DY.........
...........0.........................D............
.................u...................p...Y........
.......u.........................................."""

location_dict = {}

for i, line in enumerate(inputS.split("\n")):
    for j, char in enumerate(line):
        if char != ".":
            if char in location_dict:
                location_dict[char].append((i, j))
            else:
                location_dict[char] = [(i, j)]

bad_points = {}
for key in location_dict:
    for i in range(len(location_dict[key])):
        for j in range(i + 1, len(location_dict[key])):
            loc1 = location_dict[key][i]
            c = 0
            while (
                loc1[0] >= 0
                and loc1[0] < len(inputS.split("\n"))
                and loc1[1] >= 0
                and loc1[1] < len(inputS.split("\n")[0])
            ):
                bad_points[loc1] = True

                loc1 = (
                    location_dict[key][i][0]
                    + c * (location_dict[key][i][0] - location_dict[key][j][0]),
                    location_dict[key][i][1]
                    + c * (location_dict[key][i][1] - location_dict[key][j][1]),
                )
                c += 1
            c = 0
            loc2 = location_dict[key][j]
            while (
                loc2[0] >= 0
                and loc2[0] < len(inputS.split("\n"))
                and loc2[1] >= 0
                and loc2[1] < len(inputS.split("\n")[0])
            ):
                bad_points[loc2] = True
                c += 1
                loc2 = (
                    location_dict[key][j][0]
                    + c * (location_dict[key][j][0] - location_dict[key][i][0]),
                    location_dict[key][j][1]
                    + c * (location_dict[key][j][1] - location_dict[key][i][1]),
                )

counter = 0
output = ""
for i in range(len(inputS.split("\n"))):
    for j in range(len(inputS.split("\n")[0])):
        if (i, j) in bad_points:
            output += "#"
            counter += 1
        else:
            output += inputS.split("\n")[i][j]
    output += "\n"

print(output)
print(counter)
